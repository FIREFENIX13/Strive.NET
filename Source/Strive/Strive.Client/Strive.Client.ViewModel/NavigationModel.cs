using System.Collections.Generic;
using UpdateControls;
using Strive.Model;


namespace Strive.Client.ViewModel
{
    public class WorldNavigation
    {
        // storing only the id, as the objects get replaced entirely
        // TODO: as these all behave the same, can they be made generic?
        private readonly HashSet<int> _selectedEntities = new HashSet<int>();
        private readonly HashSet<int> _selectedMissions = new HashSet<int>();
        private readonly HashSet<int> _selectedTasks = new HashSet<int>(); 
        private int? _mouseOverEntity;

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private readonly Independent _indMouseOverEntity = new Independent();
        private readonly Independent _indSelectedEntities = new Independent();
        private readonly Independent _indSelectedMissions = new Independent();
        private readonly Independent _indSelectedTasks = new Independent();

        public void SetSelected(EntityModel e) { SetSelectedEntity(e.Id); }
        public void SetSelectedEntity(int id)
        {
            _indSelectedEntities.OnSet();
            _selectedEntities.Clear();
            _selectedEntities.Add(id);
        }

        public void AddSelected(EntityModel e) { AddSelectedEntity(e.Id); }
        public void AddSelectedEntity(int id)
        {
            _indSelectedEntities.OnSet();
            _selectedEntities.Add(id);
        }

        public void RemoveSelected(EntityModel e) { RemoveSelectedEntity(e.Id); }
        public void RemoveSelectedEntity(int id)
        {
            _indSelectedEntities.OnSet();
            _selectedEntities.Remove(id);
        }

        public bool IsSelected(EntityModel e) { return IsSelectedEntity(e.Id); }
        public bool IsSelectedEntity(int id)
        {
            _indSelectedEntities.OnGet();
            return _selectedEntities.Contains(id);
        }

        public IEnumerable<int> SelectedEntities
        {
            get { _indSelectedEntities.OnGet(); return _selectedEntities; }
        }

        public int? MouseOverEntity
        {
            get { _indMouseOverEntity.OnGet(); return _mouseOverEntity; }
            set { _indMouseOverEntity.OnSet(); _mouseOverEntity = value; }
        }

        public void SetSelected(MissionModel mission) { SetSelectedMission(mission.Id); }
        public void SetSelectedMission(int id)
        {
            _indSelectedMissions.OnSet();
            _selectedMissions.Clear();
            _selectedMissions.Add(id);
        }

        public void AddSelected(MissionModel mission) { AddSelectedMission(mission.Id); }
        public void AddSelectedMission(int id)
        {
            _indSelectedMissions.OnSet();
            _selectedMissions.Add(id);
        }

        public void RemoveSelected(MissionModel mission) { RemoveSelectedMission(mission.Id); }
        public void RemoveSelectedMission(int id)
        {
            _indSelectedMissions.OnSet();
            _selectedMissions.Remove(id);
        }

        public bool IsSelected(MissionModel mission) { return IsSelectedMission(mission.Id); }
        public bool IsSelectedMission(int id)
        {
            _indSelectedMissions.OnGet();
            return _selectedMissions.Contains(id);
        }

        public IEnumerable<int> SelectedMissions
        {
            get { _indSelectedMissions.OnGet(); return _selectedMissions; }
        }

        public void SetSelected(TaskModel task) { SetSelectedTask(task.Id); }
        public void SetSelectedTask(int id)
        {
            _indSelectedTasks.OnSet();
            _selectedTasks.Clear();
            _selectedTasks.Add(id);
        }

        public void AddSelected(TaskModel task) { AddSelectedTask(task.Id); }
        public void AddSelectedTask(int id)
        {
            _indSelectedTasks.OnSet();
            _selectedTasks.Add(id);
        }

        public void RemoveSelected(TaskModel task) { RemoveSelectedTask(task.Id); }
        public void RemoveSelectedTask(int id)
        {
            _indSelectedTasks.OnSet();
            _selectedTasks.Remove(id);
        }

        public bool IsSelected(TaskModel task) { return IsSelectedTask(task.Id); }
        public bool IsSelectedTask(int id)
        {
            _indSelectedTasks.OnGet();
            return _selectedTasks.Contains(id);
        }

        public IEnumerable<int> SelectedTasks
        {
            get { _indSelectedTasks.OnGet(); return _selectedTasks; }
        }
        // End generated code --------------------------------
        #endregion
    }
}

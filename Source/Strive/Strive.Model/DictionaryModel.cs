using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using UpdateControls;


namespace Strive.Model
{
    public class DictionaryModel<TKeyType, TValueType>
    {
        private readonly Dictionary<TKeyType, TValueType> _dictionary = new Dictionary<TKeyType, TValueType>();

        public DictionaryModel(){}

        public DictionaryModel(IEnumerable<KeyValuePair<TKeyType, TValueType>> keyValuePairs)
        {
            Contract.Requires<ArgumentNullException>(keyValuePairs != null);

            foreach (var e in keyValuePairs)
                _dictionary[e.Key] = e.Value;
        }

        #region Independent properties
        // Generated by Update Controls --------------------------------
        private readonly Independent _indEntities = new Independent();

        public void Add(TKeyType key, TValueType value)
        {
            _indEntities.OnSet();
            _dictionary[key] = value;
        }

        public void Remove(TKeyType key)
        {
            _indEntities.OnSet();
            _dictionary.Remove(key);
        }

        public TValueType Get(TKeyType key)
        {
            _indEntities.OnGet();
            return _dictionary[key];
        }

        public IEnumerable<TValueType> Entities
        {
            get { _indEntities.OnGet(); return _dictionary.Values; }
        }

        public Dictionary<TKeyType, TValueType> Dictionary
        {
            get { _indEntities.OnGet(); return _dictionary; }
        }

        public int Count
        {
            get { _indEntities.OnGet(); return _dictionary.Count; }
        }

        public void Clear()
        {
            _indEntities.OnSet();
            _dictionary.Clear();
        }

        public bool ContainsKey(TKeyType key)
        {
            _indEntities.OnGet();
            return _dictionary.ContainsKey(key);
        }

        public bool ContainsValue(TValueType value)
        {
            _indEntities.OnGet();
            return _dictionary.ContainsValue(value);
        }

        // End generated code --------------------------------
        #endregion
    }
}
